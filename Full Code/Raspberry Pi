Setting up a Raspberry Pi involves several steps, including installing the operating system, connecting to WiFi, and deploying your application. Here's a detailed guide:

### 1. Initial Setup of Raspberry Pi

#### A. Prepare the SD Card

1. **Download Raspberry Pi Imager:**
   - Download and install the Raspberry Pi Imager from the official Raspberry Pi website: [Raspberry Pi Imager](https://www.raspberrypi.org/software/).

2. **Flash Raspberry Pi OS:**
   - Insert your SD card into your computer.
   - Open Raspberry Pi Imager.
   - Select the OS: Choose "Raspberry Pi OS (32-bit)".
   - Select your SD card.
   - Click "Write" and wait for the process to complete.

#### B. Configure WiFi and Enable SSH

1. **Enable SSH and Set WiFi Credentials:**
   - After the SD card is flashed, do not eject it.
   - Open the SD card in your file explorer.
   - Create an empty file named `ssh` (no file extension) in the root of the SD card to enable SSH.
   - Create a file named `wpa_supplicant.conf` in the root of the SD card with the following content, replacing `SSID` and `PASSWORD` with your WiFi credentials:
     ```sh
     country=US
     ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
     update_config=1

     network={
       ssid="SSID"
       psk="PASSWORD"
     }
     ```

2. **Insert the SD Card:**
   - Safely eject the SD card from your computer and insert it into the Raspberry Pi.

3. **Power Up the Pi:**
   - Connect the Raspberry Pi to a power source. It will boot up and connect to your WiFi network.

### 2. Connect to the Raspberry Pi

#### A. Find the Pi’s IP Address

1. **Use an IP Scanner:**
   - Use a network IP scanner (e.g., Angry IP Scanner) to find the Raspberry Pi's IP address on your network.
   - Alternatively, check your router’s connected devices list.

#### B. SSH into the Pi

1. **Open Terminal:**
   - On your computer, open a terminal (or use an SSH client like PuTTY on Windows).
   - Connect to the Raspberry Pi using its IP address:
     ```sh
     ssh pi@<raspberry_pi_ip>
     ```
   - The default password is `raspberry`.

### 3. Set Up Your Web Application

#### A. Install Necessary Software

1. **Update and Upgrade:**
   - Update the package list and upgrade all packages:
     ```sh
     sudo apt-get update
     sudo apt-get upgrade
     ```

2. **Install Node.js and npm:**
   - Install Node.js and npm:
     ```sh
     sudo apt-get install -y nodejs npm
     ```

3. **Install a Web Server:**
   - For a simple setup, you can use a lightweight web server like `express` in Node.js.

#### B. Set Up the Web Application

1. **Transfer Your Code:**
   - Transfer your HTML, CSS, and JavaScript files to the Raspberry Pi using `scp` or any file transfer method you prefer.

2. **Set Up the Project:**
   - On the Raspberry Pi, create a directory for your project and navigate to it:
     ```sh
     mkdir my-web-app
     cd my-web-app
     ```

3. **Initialize a Node.js Project:**
   - Initialize a new Node.js project:
     ```sh
     npm init -y
     ```

4. **Install Express:**
   - Install Express:
     ```sh
     npm install express
     ```

5. **Create a Server File:**
   - Create a file named `server.js` in the project directory with the following content:
     ```js
     const express = require('express');
     const path = require('path');
     const app = express();
     const port = 3000;

     // Serve static files from the public directory
     app.use(express.static(path.join(__dirname, 'public')));

     app.get('/', (req, res) => {
       res.sendFile(path.join(__dirname, 'public', 'index.html'));
     });

     app.listen(port, () => {
       console.log(`Server running at http://localhost:${port}`);
     });
     ```

6. **Organize Your Files:**
   - Create a directory named `public` in your project directory and move all your HTML, CSS, and JavaScript files into it.

7. **Start the Server:**
   - Start your server:
     ```sh
     node server.js
     ```

8. **Access Your Application:**
   - Open a web browser on any device connected to the same network and go to `http://<raspberry_pi_ip>:3000`.

### 4. Additional Configuration

#### A. Set Up the Server to Start on Boot

1. **Install PM2:**
   - PM2 is a process manager for Node.js applications:
     ```sh
     sudo npm install -g pm2
     ```

2. **Start Your Application with PM2:**
   - Start your application:
     ```sh
     pm2 start server.js
     ```

3. **Set Up PM2 to Start on Boot:**
   - Configure PM2 to start on boot:
     ```sh
     pm2 startup
     pm2 save
     ```

### 5. Storing Data on the Raspberry Pi

#### A. Set Up a Database

1. **Install SQLite:**
   - SQLite is a lightweight database that is suitable for this project:
     ```sh
     sudo apt-get install sqlite3
     ```

2. **Initialize the Database:**
   - Create a database and a table for storing asset information:
     ```sh
     sqlite3 assets.db
     ```
     ```sql
     CREATE TABLE assets (
       id INTEGER PRIMARY KEY AUTOINCREMENT,
       name TEXT NOT NULL,
       description TEXT,
       status TEXT NOT NULL
     );
     .exit
     ```

#### B. Integrate SQLite with Your Application

1. **Install SQLite for Node.js:**
   - Install the SQLite package:
     ```sh
     npm install sqlite3
     ```

2. **Update Your Server File:**
   - Modify your `server.js` to handle database operations. Here is a basic example:
     ```js
     const express = require('express');
     const path = require('path');
     const sqlite3 = require('sqlite3').verbose();
     const app = express();
     const port = 3000;

     // Serve static files from the public directory
     app.use(express.static(path.join(__dirname, 'public')));
     app.use(express.json());

     // Open database
     let db = new sqlite3.Database('./assets.db', sqlite3.OPEN_READWRITE, (err) => {
       if (err) {
         console.error(err.message);
       }
       console.log('Connected to the assets database.');
     });

     // Handle asset addition
     app.post('/add-asset', (req, res) => {
       const { name, description, status } = req.body;
       db.run(`INSERT INTO assets (name, description, status) VALUES (?, ?, ?)`, [name, description, status], function(err) {
         if (err) {
           return console.log(err.message);
         }
         res.json({ id: this.lastID });
       });
     });

     // Handle getting all assets
     app.get('/assets', (req, res) => {
       db.all(`SELECT * FROM assets`, [], (err, rows) => {
         if (err) {
           throw err;
         }
         res.json(rows);
       });
     });

     app.listen(port, () => {
       console.log(`Server running at http://localhost:${port}`);
     });
     ```

3. **Update Your Client Code:**
   - Update your client-side JavaScript to make requests to these endpoints for adding and retrieving assets.

By following these steps, you will have a fully functioning web application hosted on your Raspberry Pi Zero 2 W, with all data being stored locally on the device. The application will be accessible from any device on the same network, and it will start automatically on boot.
